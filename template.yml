AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  CobblerRecipesService:
    Type: AWS::Serverless::Api
    Description: "Serverless API for CRUD operations"
    Properties:
      Name: "cobbler-recipes-service"
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS, POST, GET, PUT, DELETE'"
        AllowHeaders: "'Content-Type, x-amz-content-sha256, x-amz-date, X-Amz-Security-Token, Authorization'"
        # AllowOrigin: "'http://localhost:5173'" # replace for production
        AllowOrigin: "'https://cobbler.phil-code.com'"
        AllowCredentials: true
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt CobblerApiLogGroup.Arn
        Format: '$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId'
  CobblerApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/api-gateway/${CobblerRecipesService}"
      RetentionInDays: 7
  
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
    CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: !GetAtt CobblerApiLogGroup.Arn

  CobblerRecipesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 512
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref CobblerRecipesTable
      Events:
        RecipesOptions:
          Type: Api
          Properties:
            Path: /recipes
            Method: OPTIONS
            RestApiId: !Ref CobblerRecipesService
        RecipesOptionsId:
          Type: Api
          Properties:
            Path: /recipes/{id}
            Method: OPTIONS
            RestApiId: !Ref CobblerRecipesService
        GetRecipe:
          Type: Api
          Properties:
            Path: /recipes/{id}
            Method: GET
            RestApiId: !Ref CobblerRecipesService
            Auth:
                Authorizer: AWS_IAM
        GetRecipes:
          Type: Api
          Properties:
            Path: /recipes
            Method: GET
            RestApiId: !Ref CobblerRecipesService
            Auth:
                Authorizer: AWS_IAM
        PutRecipe:
          Type: Api
          Properties:
            Path: /recipes
            Method: POST
            RestApiId: !Ref CobblerRecipesService
            Auth:
                Authorizer: AWS_IAM
        DeleteRecipe:
          Type: Api
          Properties:
            Path: /recipes/{id}
            Method: DELETE
            RestApiId: !Ref CobblerRecipesService
            Auth:
                Authorizer: AWS_IAM
        UpdateRecipe:
          Type: Api
          Properties:
            Path: /recipes/{id}
            Method: PUT
            RestApiId: !Ref CobblerRecipesService
            Auth:
                Authorizer: AWS_IAM
    Metadata:
      BuildMethod: makefile

  CobblerRecipesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CobblerRecipes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
